#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import sys
import os
import tempfile
import shutil
import re
import logging

try:
    from configparser import ConfigParser as confparser
except ImportError:
    from ConfigParser import ConfigParser as confparser

try:
    import pygit2
except:
    print("Could not find the pygit2 package")
    sys.exit(1)

_DEFAULTPATH = os.path.expanduser("~/.gitcheckver")


class gitcheckver(object):

    def __init__(self, confpath=_DEFAULTPATH, verbose=True):

        self.log = self.get_log("gitcheckver")
        self.verbose = verbose
        if self.verbose:
            self.log.setLevel(logging.DEBUG)
            self.log.debug("Running in verbose mode")
        else:
            self.log.setLevel(logging.INFO)

        self.conf = confparser()
        self.confpath = confpath
        self.get_config()
        self.config_changed = False
        self.repos = self.conf.sections()
        self.tmpdir = None

    def get_log(self, name):
        # Create a log
        log = logging.getLogger(name)

        # Create handlers and their formatters
        stdh = logging.StreamHandler()

        # Add handlers to log
        log.addHandler(stdh)

        # Set handlers to DEBUG
        stdh.setLevel(logging.DEBUG)

        return log

    def get_config(self):

        if(os.path.exists(self.confpath)):
            self.log.debug("Using configuration file {}."
                           .format(self.confpath))
            self.conf.read(self.confpath)
        else:
            self.log.critical("Configuration file is empty! " +
                              "Please set up some repos to track")
            sys.exit(2)

    def get_tmpdir(self):
        if not self.tmpdir:
            self.tmpdir = tempfile.mkdtemp(prefix="gitcheckver-")

        return self.tmpdir

    def update_repo(self, repo_url, repo_path=None):

        class BreakCallbacks(pygit2.RemoteCallbacks):
            def credentials(self, url, username_from_url, allowed_types):
                # TODO: implement actual authentication
                # see https://github.com/libgit2/pygit2/issues/428
                # and http://www.pygit2.org/remotes.html?highlight=credentials#credentials
                raise NotImplementedError(
                        "Authentication is not yet supported.")

        if(os.path.exists(repo_path)):
            repo_path = pygit2.discover_repository(repo_path)
            if(repo_path):
                repo = pygit2.Repository(repo_path)
                self.log.debug("Found local repo for {}"
                               .format(repo_url))
            try:
                for remote in repo.remotes:
                    remote.fetch(callbacks=BreakCallbacks())
                    self.log.debug("Updated remote {}"
                                   .format(remote.name))

            except NotImplementedError as e:
                self.log.warning("Couldn't update remote {}."
                                 .format(remote.name))
                self.log.debug("'{}: {}'".format(type(e).__name__,
                                                 e))
                pass
            except Exception as e:
                self.log.warning("Couldn't update remote {}."
                                 .format(remote.name))
                self.log.debug("'{}: {}'".format(type(e).__name__,
                                                 e))
                repo = None
        else:
            try:
                repo = pygit2.clone_repository(repo_url,
                                               repo_path,
                                               bare=True)
                self.log.debug("Cloned a copy of {}".format(repo_url))
            except Exception as e:
                self.log.error("Couldn't update repo.")
                self.log.debug("'{}: {}'".format(type(e).__name__, e))
                repo = None

        return repo

    def check_versions(self):
        updated = {}
        for repo in self.repos:
            repo_name = repo
            repo_url = self.conf.get(repo_name, 'url')
            repo_path = self.conf.get(repo_name, 'path', fallback=None)
            if not repo_path:
                repo_path = os.path.join(self.get_tmpdir(), repo_name)

            repo = self.update_repo(repo_url,
                                    os.path.expanduser(repo_path))

            if repo:
                self.log.debug("Updated repo {}.".format(repo_name))
            try:
                old_ver = self.conf.get(repo_name, 'ver', fallback="0.0")
                new_ver, repo_ver = self.check_version(repo,
                                                       old_ver,
                                                       repo_name)
                if (new_ver):
                    updated[repo_name] = repo_ver
            except Exception:
                pass

        self.notify_updated(updated)

    def check_version(self, repo, old_ver, repo_name):
        tag_regex = re.compile('^refs/tags/')
        tags = filter(lambda r: tag_regex.match(r),
                      repo.listall_references())
        repo_ver = re.sub(tag_regex, '', max(tags))

        if(repo_ver > old_ver):
            self.conf.set(repo_name, 'ver', repo_ver)
            self.config_changed = True
            return True, repo_ver
        else:
            return False, None

    def notify_updated(self, updated_dict=dict()):
        for repo, version in updated_dict.items():
            self.log.info("{} was updated to {}".format(repo, version))

    def close(self):
        if(self.config_changed):
            with open(self.confpath, 'w') as configfile:
                self.conf.write(configfile)
        if(self.tmpdir):
            shutil.rmtree(self.tmpdir)
        sys.exit(0)


if __name__ == "__main__":
    main = gitcheckver()
    main.check_versions()
    main.close()
# vim: set ts=4 sw=4 et:
